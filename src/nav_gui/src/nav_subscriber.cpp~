#include "ros/ros.h"
#include "opencv2/opencv.hpp"
#include "std_msgs/String.h"
#include "rover_msgs/NavState.h"
#include "waypoint.h"
#include "rover.h"
#include "screenshot.h"
#include "display.h"
#include <iostream>
#include <fstream>
#include <ctime>

#define MIDDLE_CLICK 1
#define RIGHT_CLICK 2

// Global variables to store GPS and IMU data
double latitudeVal = 0;
double longitudeVal = 0;
double magHeadingVal = 0;

int dxRover = 0; // used to reset rover position on screen
int dyRover = 0; 
int dxAnchor = 0; // used to reset waypoints on screen
int dyAnchor = 0;
int mouseClickFlag = 0;

void navCallback(const rover_msgs::NavState::ConstPtr& stateMsg)
{
  latitudeVal = stateMsg->base_latitude;
  longitudeVal = stateMsg->base_longitude;
  magHeadingVal = stateMsg->psi*(180.0/3.14159);

//  ROS_INFO("I heard: [ %f , %f , %f ]", stateMsg->position[0], stateMsg->position[1], stateMsg->phi);
//  ROS_INFO("I heard: [ %f , %f , %f ]", latitudeVal, longitudeVal, magHeadingVal);
}

// Mouse click callback
void mouseCallBack(int event, int x, int y, int flags, void* userdata)
{
      if (event == cv::EVENT_MBUTTONDOWN) // middle button pressed - reset rover
      {
             mouseClickFlag = MIDDLE_CLICK;
             dxRover = x - 10; // dxRover = dxRover + x - 10;
             dyRover = y - 10; // dyRover = dyRover + y - 10;

             std::cout << "X-Click: " << x << ", Y-Click: " << y << std::endl;
             // move rover to position indicated by click
      }
      if (event == cv::EVENT_RBUTTONDOWN) // right button pressed - reset anchor waypoint
      {
             mouseClickFlag = RIGHT_CLICK;
             dxAnchor = x - 10;
             dyAnchor = y - 10;

             std::cout << "X-Click: " << x << ", Y-Click: " << y << std::endl;
             // move rover to position indicated by click
      }
}

int main(int argc, char **argv)
{
    ros::init(argc, argv, "listener");

    ros::NodeHandle n;

    ros::Subscriber sub = n.subscribe("nav_state", 1, navCallback);

    ros::Rate loop_rate(10); // 10 Hz

    // initialize GUI 
    std::string mapPath = "/home/halrover/git/kyle/rover_nav_gui_ws/src/nav_gui/screenshots/initFiles/image.png"; // path to map image
    std::string radarPath = "/home/halrover/git/kyle/rover_nav_gui_ws/src/nav_gui/screenshots/radar.png"; // path to radar image
    std::string waypointPath = "/home/halrover/git/kyle/rover_nav_gui_ws/src/nav_gui/screenshots/initFiles/waypoints.txt"; // path to waypoint coords
    std::string obstaclePath = "/home/halrover/git/kyle/rover_nav_gui_ws/src/nav_gui/screenshots/initFiles/obstacles.txt"; // path to obstacle coords
    std::string anchorPath = "/home/halrover/git/kyle/rover_nav_gui_ws/src/nav_gui/screenshots/initFiles/anchor.txt"; // path to anchor waypoint coords
    std::string mapInitPath = "/home/halrover/git/kyle/rover_nav_gui_ws/src/nav_gui/screenshots/initFiles/mapInit.txt"; // path to map init coords

//    std::string mapPath = "/home/kyle/gitMars/ros_nav_gui_ws/src/nav_gui/screenshots/initFiles/image.png"; // path to map image
//    std::string radarPath = "/home/kyle/gitMars/ros_nav_gui_ws/src/nav_gui/screenshots/radar.png"; // path to radar image
//    std::string waypointPath = "/home/kyle/gitMars/ros_nav_gui_ws/src/nav_gui/screenshots/initFiles/waypoints.txt"; // path to waypoint coords
//    std::string obstaclePath = "/home/kyle/gitMars/ros_nav_gui_ws/src/nav_gui/screenshots/initFiles/obstacles.txt"; // path to obstacle coords
//    std::string anchorPath = "/home/kyle/gitMars/ros_nav_gui_ws/src/nav_gui/screenshots/initFiles/anchor.txt"; // path to anchor waypoint coords
//    std::string mapInitPath = "/home/kyle/gitMars/ros_nav_gui_ws/src/nav_gui/screenshots/initFiles/mapInit.txt"; // path to map init coords
    
    display myDisplay(mapPath,radarPath,waypointPath,obstaclePath,anchorPath,mapInitPath);

    // click to place rover in that location
    cv::setMouseCallback("mainWindow", mouseCallBack, NULL);

    std::cout << "anchor X: " << myDisplay.anchor.getCoordinates().x << "anchor Y: " << myDisplay.anchor.getCoordinates().y << std::endl;
    
    while (ros::ok())
    {
        if (mouseClickFlag)
        {
            if (mouseClickFlag == MIDDLE_CLICK)
            {
                mouseClickFlag = 0;
                cv::Point roverCoords = myDisplay.mRover.getCoordinates();
                cv::Point offset = roverCoords - cv::Point(dxRover,dyRover);
                myDisplay.mRover.setOffset(offset + myDisplay.mRover.getOffset());

                std::cout << "Rover Coords: X: " << roverCoords.x << ", Y: " << roverCoords.y << std::endl;
                std::cout << "Click Coords: X: " << dxRover << ", Y: " << dyRover << std::endl;
                std::cout << "Offset Coords: X: " << offset.x << ", Y: " << offset.y << std::endl << std::endl;

	            //dxRover = dxRover - coords.x; // update offset values
	            //dyRover = dyRover - coords.y; // update offset values
	            //myDisplay.init(mapFile,radarFile,waypointFile,mapInitFile,dxRover,dyRover);
            }
            else if (mouseClickFlag == RIGHT_CLICK)
            {
                mouseClickFlag = 0;
                cv::Point anchorCoords = myDisplay.anchor.getCoordinates();
                cv::Point offset = anchorCoords - cv::Point(dxAnchor,dyAnchor);
                
                for (int i=0; i < myDisplay.waypoints.size(); i++)
                {
                    myDisplay.waypoints[i].setOffset(offset + myDisplay.anchor.getOffset());
                    myDisplay.waypoints[i].setCoordinates(myDisplay.myMap);
                }
                
                myDisplay.anchor.setOffset(offset + myDisplay.anchor.getOffset());
                myDisplay.anchor.setCoordinates(myDisplay.myMap);

                // clear window
                myDisplay.reinit(mapPath);
                
                std::cout << "Anchor Coords: X: " << anchorCoords.x << ", Y: " << anchorCoords.y << std::endl;
                std::cout << "Click Coords: X: " << dxAnchor << ", Y: " << dyAnchor << std::endl;
                std::cout << "Offset Coords: X: " << offset.x << ", Y: " << offset.y << std::endl << std::endl;
            }

        }
        myDisplay.updateRover(latitudeVal,longitudeVal,magHeadingVal);
        myDisplay.rotateRadar();
        myDisplay.drawWaypoints();
        myDisplay.drawObstacles();
        myDisplay.drawAnchor();
        myDisplay.drawRover();
        myDisplay.updateDisplay();
        cv::waitKey(1);
	    ros::spinOnce(); // catch the most recent message
        loop_rate.sleep();
    }
    ros::spin();

    return 0;
}
