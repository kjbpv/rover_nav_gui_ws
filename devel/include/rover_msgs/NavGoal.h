// Generated by gencpp from file rover_msgs/NavGoal.msg
// DO NOT EDIT!


#ifndef ROVER_MSGS_MESSAGE_NAVGOAL_H
#define ROVER_MSGS_MESSAGE_NAVGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rover_msgs
{
template <class ContainerAllocator>
struct NavGoal_
{
  typedef NavGoal_<ContainerAllocator> Type;

  NavGoal_()
    : latitude(0.0)
    , longitude(0.0)
    , arrive_limit(0.0)  {
    }
  NavGoal_(const ContainerAllocator& _alloc)
    : latitude(0.0)
    , longitude(0.0)
    , arrive_limit(0.0)  {
    }



   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _arrive_limit_type;
  _arrive_limit_type arrive_limit;




  typedef boost::shared_ptr< ::rover_msgs::NavGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rover_msgs::NavGoal_<ContainerAllocator> const> ConstPtr;

}; // struct NavGoal_

typedef ::rover_msgs::NavGoal_<std::allocator<void> > NavGoal;

typedef boost::shared_ptr< ::rover_msgs::NavGoal > NavGoalPtr;
typedef boost::shared_ptr< ::rover_msgs::NavGoal const> NavGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rover_msgs::NavGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rover_msgs::NavGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rover_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'rover_msgs': ['/home/kyle/gitMars/ros_nav_gui_ws/src/rover_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rover_msgs::NavGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rover_msgs::NavGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_msgs::NavGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_msgs::NavGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_msgs::NavGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_msgs::NavGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rover_msgs::NavGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "876be018bdc946f5d2ae7abd719a1cf2";
  }

  static const char* value(const ::rover_msgs::NavGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x876be018bdc946f5ULL;
  static const uint64_t static_value2 = 0xd2ae7abd719a1cf2ULL;
};

template<class ContainerAllocator>
struct DataType< ::rover_msgs::NavGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rover_msgs/NavGoal";
  }

  static const char* value(const ::rover_msgs::NavGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rover_msgs::NavGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Latitude [degrees]. Positive is north of equator; negative is south.\n\
float64 latitude\n\
\n\
# Longitude [degrees]. Positive is east of prime meridian; negative is west.\n\
float64 longitude\n\
\n\
float64 arrive_limit\n\
";
  }

  static const char* value(const ::rover_msgs::NavGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rover_msgs::NavGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.arrive_limit);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct NavGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rover_msgs::NavGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rover_msgs::NavGoal_<ContainerAllocator>& v)
  {
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "arrive_limit: ";
    Printer<double>::stream(s, indent + "  ", v.arrive_limit);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROVER_MSGS_MESSAGE_NAVGOAL_H
