// Generated by gencpp from file rover_msgs/SciFeedback.msg
// DO NOT EDIT!


#ifndef ROVER_MSGS_MESSAGE_SCIFEEDBACK_H
#define ROVER_MSGS_MESSAGE_SCIFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rover_msgs
{
template <class ContainerAllocator>
struct SciFeedback_
{
  typedef SciFeedback_<ContainerAllocator> Type;

  SciFeedback_()
    : temp(0)
    , humidity(0)  {
    }
  SciFeedback_(const ContainerAllocator& _alloc)
    : temp(0)
    , humidity(0)  {
    }



   typedef uint16_t _temp_type;
  _temp_type temp;

   typedef uint16_t _humidity_type;
  _humidity_type humidity;




  typedef boost::shared_ptr< ::rover_msgs::SciFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rover_msgs::SciFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct SciFeedback_

typedef ::rover_msgs::SciFeedback_<std::allocator<void> > SciFeedback;

typedef boost::shared_ptr< ::rover_msgs::SciFeedback > SciFeedbackPtr;
typedef boost::shared_ptr< ::rover_msgs::SciFeedback const> SciFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rover_msgs::SciFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rover_msgs::SciFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rover_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'rover_msgs': ['/home/halrover/git/kyle/rover_nav_gui_ws/src/rover_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rover_msgs::SciFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rover_msgs::SciFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_msgs::SciFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_msgs::SciFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_msgs::SciFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_msgs::SciFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rover_msgs::SciFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5129e2448ce73c4ae0b8d277356e0494";
  }

  static const char* value(const ::rover_msgs::SciFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5129e2448ce73c4aULL;
  static const uint64_t static_value2 = 0xe0b8d277356e0494ULL;
};

template<class ContainerAllocator>
struct DataType< ::rover_msgs::SciFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rover_msgs/SciFeedback";
  }

  static const char* value(const ::rover_msgs::SciFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rover_msgs::SciFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 temp\n\
uint16 humidity\n\
";
  }

  static const char* value(const ::rover_msgs::SciFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rover_msgs::SciFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.temp);
      stream.next(m.humidity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct SciFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rover_msgs::SciFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rover_msgs::SciFeedback_<ContainerAllocator>& v)
  {
    s << indent << "temp: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.temp);
    s << indent << "humidity: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.humidity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROVER_MSGS_MESSAGE_SCIFEEDBACK_H
