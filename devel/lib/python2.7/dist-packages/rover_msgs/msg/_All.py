# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rover_msgs/All.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class All(genpy.Message):
  _md5sum = "d58546379b54b62019e6cb68da5f967c"
  _type = "rover_msgs/All"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint16 lw
uint16 rw
uint16 pan
uint16 tilt
uint8 camnum
uint16 q1
uint16 q2
uint16 q3
uint16 q4
uint16 q5
uint16 q6
uint16 grip
uint8 chutes
uint16 shovel


"""
  __slots__ = ['lw','rw','pan','tilt','camnum','q1','q2','q3','q4','q5','q6','grip','chutes','shovel']
  _slot_types = ['uint16','uint16','uint16','uint16','uint8','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint8','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lw,rw,pan,tilt,camnum,q1,q2,q3,q4,q5,q6,grip,chutes,shovel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(All, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.lw is None:
        self.lw = 0
      if self.rw is None:
        self.rw = 0
      if self.pan is None:
        self.pan = 0
      if self.tilt is None:
        self.tilt = 0
      if self.camnum is None:
        self.camnum = 0
      if self.q1 is None:
        self.q1 = 0
      if self.q2 is None:
        self.q2 = 0
      if self.q3 is None:
        self.q3 = 0
      if self.q4 is None:
        self.q4 = 0
      if self.q5 is None:
        self.q5 = 0
      if self.q6 is None:
        self.q6 = 0
      if self.grip is None:
        self.grip = 0
      if self.chutes is None:
        self.chutes = 0
      if self.shovel is None:
        self.shovel = 0
    else:
      self.lw = 0
      self.rw = 0
      self.pan = 0
      self.tilt = 0
      self.camnum = 0
      self.q1 = 0
      self.q2 = 0
      self.q3 = 0
      self.q4 = 0
      self.q5 = 0
      self.q6 = 0
      self.grip = 0
      self.chutes = 0
      self.shovel = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4HB7HBH.pack(_x.lw, _x.rw, _x.pan, _x.tilt, _x.camnum, _x.q1, _x.q2, _x.q3, _x.q4, _x.q5, _x.q6, _x.grip, _x.chutes, _x.shovel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.lw, _x.rw, _x.pan, _x.tilt, _x.camnum, _x.q1, _x.q2, _x.q3, _x.q4, _x.q5, _x.q6, _x.grip, _x.chutes, _x.shovel,) = _struct_4HB7HBH.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4HB7HBH.pack(_x.lw, _x.rw, _x.pan, _x.tilt, _x.camnum, _x.q1, _x.q2, _x.q3, _x.q4, _x.q5, _x.q6, _x.grip, _x.chutes, _x.shovel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.lw, _x.rw, _x.pan, _x.tilt, _x.camnum, _x.q1, _x.q2, _x.q3, _x.q4, _x.q5, _x.q6, _x.grip, _x.chutes, _x.shovel,) = _struct_4HB7HBH.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4HB7HBH = struct.Struct("<4HB7HBH")
